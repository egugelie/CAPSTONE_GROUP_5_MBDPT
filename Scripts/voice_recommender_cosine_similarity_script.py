# -*- coding: utf-8 -*-
"""Version para py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19eTOIcGbcd3dNE3ZCGWTJTuo63e2Mhzs
"""

import os
import pandas as pd
import warnings
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from openai import OpenAI


def recommender_cosine_similarity(cart_articles, orders, embeddings, embeddings_matrix):
    # Concatenate columns to create the vector of words
    orders['vector_words'] = orders['nombre_producto'] + ' ' + orders['pasillo'] + ' ' + orders['departamento']

    # Group by 'nombre_producto' and get the list of vectors for each product
    products = orders.groupby('nombre_producto')['vector_words'].apply(list).reset_index()

    # Filter the products DataFrame to include only the selected items
    filtered_products = products[products['nombre_producto'].isin(cart_articles)]

    # Flatten the list of lists
    cart_articles_vector = [item for sublist in filtered_products['vector_words'] for item in sublist]

    # Convert to a unique list
    cart_articles_vector = list(set(cart_articles_vector))

    # OpenAI API
    client = OpenAI(api_key="xxx") # mati's API key

    # Create an Embedding object
    response = client.embeddings.create(model="text-embedding-ada-002", input=cart_articles_vector)
    response_dict = response.model_dump()
    cart_analisis = response_dict['data'][0]['embedding']
    cart_analisis = np.array(cart_analisis).reshape(1, -1)

    # Calculate the cosine similarity between all pairs of embeddings
    cosine_similarities = cosine_similarity(cart_analisis, embeddings_matrix)

    # Flatten the matrix to a one-dimensional vector
    cosine_similarities_flat = cosine_similarities.flatten()

    # Convert the vector to a DataFrame with a single column
    result = pd.DataFrame(cosine_similarities_flat, columns=['cosine_similarity'])
    result['id_orden'] = embeddings['id_orden']

    sorted_results = result.sort_values(by='cosine_similarity', ascending=False)
    top_orders = sorted_results.head(1000)
    #print('The similarity with the orders is:',
    #      round(top_orders['cosine_similarity'].mean(), 2),
    #      'with a maximum of:', round(top_orders['cosine_similarity'].max(), 2),
    #      'and a minimum of:', round(top_orders['cosine_similarity'].min(), 2))

    # Filter products that are not in cart_articles
    filtered_orders = orders[orders['id_orden'].isin(top_orders['id_orden'])]
    
    # Get recommended products based on top orders
    productos_recomendados = filtered_orders.groupby('nombre_producto')['id_orden'].count().reset_index()
    productos_recomendados = productos_recomendados.sort_values(by='id_orden', ascending=False)
    productos_recomendados_totales = set(productos_recomendados['nombre_producto'])
    
    # Exclude products present in cart_articles
    productos_recomendados = productos_recomendados_totales - set(cart_articles)
    
    # Debug: Verify the recommended products list
    productos_recomendados = list(productos_recomendados)
    return productos_recomendados